name: Release

on:
  push:
    tags:
      - 'v*'
      
jobs:
  release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
      issues: write
    steps:
      - name: Get GitHub App token
        id: get-token
        uses: actions/create-github-app-token@v2
        with:
          app-id: ${{ secrets.LIQUIBASE_GITHUB_APP_ID }}
          private-key: ${{ secrets.LIQUIBASE_GITHUB_APP_PRIVATE_KEY }}
          owner: ${{ github.repository_owner }}
          permission-contents: write
          permission-actions: write
          permission-packages: write

      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ steps.get-token.outputs.token }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          registry-url: 'https://registry.npmjs.org'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Prepare for GitHub Actions build
        run: |
          # Remove ES module configuration for GitHub Actions compatibility
          # GitHub Actions require CommonJS modules, not ES modules
          if grep -q '"type": "module"' package.json; then
            echo "Removing ES module configuration from package.json for GitHub Actions compatibility"
            sed -i.bak -E '/"type": "module"/d;/^$/N;/^\n$/d' package.json
            # Consolidated sed command to remove ES module configuration and clean up empty lines
          fi

      - name: Run tests
        run: npm test

      - name: Run linting
        run: npm run lint

      - name: Build distribution
        run: |
          # Remove ES module configuration from package.json for GitHub Actions compatibility
          npm run build
          
          # Remove the dist/package.json that causes ES module issues
          if [ -f "dist/package.json" ]; then
            rm dist/package.json
            echo "Removed dist/package.json to prevent ES module conflicts"
          fi

      - name: Verify build output
        run: |
          echo "=== Verifying GitHub Actions build output ==="
          
          # Check required files exist
          if [ ! -f "dist/index.js" ]; then
            echo "‚ùå dist/index.js not found!"
            exit 1
          fi
          echo "‚úÖ dist/index.js found"
          
          if [ ! -f "dist/index.js.map" ]; then
            echo "‚ùå dist/index.js.map not found!"
            exit 1
          fi
          echo "‚úÖ dist/index.js.map found"
          
          # Verify the built file is CommonJS compatible (no ES module imports)
          if grep -E -q '^import\s+.*\s+from\s+["'"'"'].*["'"'"'];?$' dist/index.js; then
            echo "‚ùå dist/index.js contains ES6 imports - GitHub Actions require CommonJS!"
            echo "Found ES6 imports:"
            grep -E '^import\s+.*\s+from\s+["'"'"'].*["'"'"'];?$' dist/index.js | head -5
            exit 1
          fi
          echo "‚úÖ No ES6 imports found in dist/index.js"
          
          # Verify it uses require() statements (CommonJS)
          if ! grep -q "require(" dist/index.js; then
            echo "‚ö†Ô∏è  Warning: No require() statements found - this may not be CommonJS"
          else
            echo "‚úÖ CommonJS require() statements found"
          fi
          
          # Check that no dist/package.json exists (which would cause ES module issues)
          if [ -f "dist/package.json" ]; then
            echo "‚ùå dist/package.json exists and may cause ES module conflicts!"
            echo "Contents:"
            cat dist/package.json
            exit 1
          fi
          echo "‚úÖ No problematic dist/package.json found"
          
          # Show basic file info
          echo "=== Build output summary ==="
          ls -la dist/
          echo "dist/index.js size: $(wc -c < dist/index.js) bytes"
          
          echo "‚úÖ Build output verified successfully for GitHub Actions"

      - name: Test action locally
        id: test-action
        uses: ./
        with:
          version: '4.32.0'
          edition: 'oss'
          cache: false
        env:
          GITHUB_TOKEN: ${{ steps.get-token.outputs.token }}

      - name: Verify action test results
        run: |
          echo "=== Action Test Verification ==="
          echo "Liquibase version output: ${{ steps.test-action.outputs.liquibase-version }}"
          echo "Liquibase path output: ${{ steps.test-action.outputs.liquibase-path }}"
          
          # Verify outputs are set
          if [ -z "${{ steps.test-action.outputs.liquibase-version }}" ]; then
            echo "‚ùå liquibase-version output not set"
            exit 1
          fi
          
          if [ -z "${{ steps.test-action.outputs.liquibase-path }}" ]; then
            echo "‚ùå liquibase-path output not set"
            exit 1
          fi
          
          # Test that Liquibase is actually working
          liquibase --version
          echo "‚úÖ Action test completed successfully"

      - name: Commit dist files to release
        env:
          GITHUB_TOKEN: ${{ steps.get-token.outputs.token }}
        run: |
          echo "=== Preparing release commit ==="
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
          # Check if there are changes to commit
          if git diff --quiet dist/; then
            echo "No changes in dist/ - skipping commit"
          else
            echo "Changes detected in dist/ - committing for release"
            git add dist/
            git commit -m "üöÄ Add built distribution files for release ${{ github.ref_name }}"
            
            # Push the commit (but don't force update the tag yet)
            git push origin HEAD:${{ github.ref_name }}
          fi
          
          echo "‚úÖ Release preparation completed"

      - name: Find and Update Draft Release
        id: find-draft
        env:
          GITHUB_TOKEN: ${{ steps.get-token.outputs.token }}
        run: |
          RELEASE_TAG="${{ github.ref_name }}"
          echo "Looking for draft release with tag: $RELEASE_TAG"
          
          # Try to find existing draft release with this tag
          DRAFT_RELEASE=$(gh release view "$RELEASE_TAG" --json isDraft,tagName,id 2>/dev/null | jq -r 'select(.isDraft == true) | .tagName' || echo "")
          
          if [ -n "$DRAFT_RELEASE" ]; then
            echo "Found existing draft release: $DRAFT_RELEASE"
            echo "outcome=found_draft" >> $GITHUB_OUTPUT
            echo "tag_name=$RELEASE_TAG" >> $GITHUB_OUTPUT
            
            # Get the release URL
            RELEASE_URL=$(gh release view "$RELEASE_TAG" --json url --jq '.url')
            echo "html_url=$RELEASE_URL" >> $GITHUB_OUTPUT
          else
            echo "No draft release found with tag $RELEASE_TAG"
            # Check if a published release already exists
            EXISTING_RELEASE=$(gh release view "$RELEASE_TAG" --json tagName 2>/dev/null | jq -r '.tagName // empty' || true)
            
            if [ -n "$EXISTING_RELEASE" ]; then
              echo "Published release already exists with tag $RELEASE_TAG"
              echo "outcome=already_published" >> $GITHUB_OUTPUT
              echo "tag_name=$RELEASE_TAG" >> $GITHUB_OUTPUT
              
              # Get the release URL
              RELEASE_URL=$(gh release view "$RELEASE_TAG" --json url --jq '.url')
              echo "html_url=$RELEASE_URL" >> $GITHUB_OUTPUT
            else
              echo "No release found, will create new one"
              echo "outcome=create_new" >> $GITHUB_OUTPUT
              echo "tag_name=$RELEASE_TAG" >> $GITHUB_OUTPUT
            fi
          fi

      - name: Upload Assets to Draft Release
        if: steps.find-draft.outputs.outcome == 'found_draft'
        env:
          GITHUB_TOKEN: ${{ steps.get-token.outputs.token }}
        run: |
          echo "Uploading assets to draft release: ${{ steps.find-draft.outputs.tag_name }}"
          
          # Upload build artifacts
          gh release upload "${{ steps.find-draft.outputs.tag_name }}" \
            dist/index.js \
            dist/index.js.map \
            --clobber
          
          echo "Assets uploaded successfully"

      - name: Publish Draft Release
        if: steps.find-draft.outputs.outcome == 'found_draft'
        env:
          GITHUB_TOKEN: ${{ steps.get-token.outputs.token }}
        run: |
          echo "Publishing draft release: ${{ steps.find-draft.outputs.tag_name }}"
          
          # Publish the draft release
          gh release edit "${{ steps.find-draft.outputs.tag_name }}" --draft=false
          
          echo "Draft release published successfully"

      - name: Update Existing Release (Add Assets)
        if: steps.find-draft.outputs.outcome == 'already_published'
        env:
          GITHUB_TOKEN: ${{ steps.get-token.outputs.token }}
        run: |
          echo "Adding assets to existing published release: ${{ steps.find-draft.outputs.tag_name }}"
          
          # Upload build artifacts to existing release
          gh release upload "${{ steps.find-draft.outputs.tag_name }}" \
            dist/index.js \
            dist/index.js.map \
            --clobber
          
          echo "Assets added to existing release"

      - name: Create New Release (Fallback)
        if: steps.find-draft.outputs.outcome == 'create_new'
        id: create-release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.ref_name }}
          name: "Setup Liquibase ${{ github.ref_name }}"
          generate_release_notes: true
          files: |
            dist/index.js
            dist/index.js.map
          draft: false
          prerelease: false
          body: |
            ## üöÄ GitHub Action Release
            
            This release contains the built distribution files required for the GitHub Action to work.
            
            ### Usage
            ```yaml
            - name: Setup Liquibase
              uses: liquibase-github-actions/setup-liquibase@${{ github.ref_name }}
              with:
                liquibase-version: "latest"
            ```
            
            ### What's Changed
            - Built with CommonJS compatibility for GitHub Actions
            - Optimized bundle size and performance
            - Includes source maps for debugging
            
            See the full changelog and documentation in the repository.
        env:
          GITHUB_TOKEN: ${{ steps.get-token.outputs.token }}

      - name: Update CHANGELOG.md and Commit
        env:
          GITHUB_TOKEN: ${{ steps.get-token.outputs.token }}
        run: |
          echo "=== Generating Dynamic CHANGELOG.md ==="
          
          RELEASE_TAG="${{ github.ref_name }}"
          RELEASE_DATE=$(date +%Y-%m-%d)
          
          # Get the previous tag for comparison
          PREVIOUS_TAG=$(git tag --sort=-version:refname | grep -v "^$RELEASE_TAG$" | head -1 || echo "")
          
          echo "Current release: $RELEASE_TAG"
          echo "Previous release: ${PREVIOUS_TAG:-'Initial release'}"
          
          # Start building the changelog entry
          cat > changelog_entry.md << EOF
          ## [$RELEASE_TAG] - $RELEASE_DATE
          
          EOF
          
          if [ -n "$PREVIOUS_TAG" ]; then
            echo "### Changes since $PREVIOUS_TAG" >> changelog_entry.md
            echo "" >> changelog_entry.md
            
            # Get commits since last tag and categorize them
            COMMITS=$(git log --oneline --pretty=format:"%s" "$PREVIOUS_TAG..$RELEASE_TAG" 2>/dev/null || git log --oneline --pretty=format:"%s" -10)
            
            # Categorize commits
            FEATURES=""
            FIXES=""
            DOCS=""
            CHORES=""
            OTHERS=""
            
            while IFS= read -r commit; do
              if [[ $commit =~ ^(feat|feature)(\(.+\))?: ]]; then
                FEATURES="$FEATURES- ${commit#*: }"$'\n'
              elif [[ $commit =~ ^(fix|bugfix)(\(.+\))?: ]]; then
                FIXES="$FIXES- ${commit#*: }"$'\n'
              elif [[ $commit =~ ^(docs?)(\(.+\))?: ]]; then
                DOCS="$DOCS- ${commit#*: }"$'\n'
              elif [[ $commit =~ ^(chore|build|ci|test)(\(.+\))?: ]]; then
                CHORES="$CHORES- ${commit#*: }"$'\n'
              else
                OTHERS="$OTHERS- $commit"$'\n'
              fi
            done <<< "$COMMITS"
            
            # Add sections if they have content
            if [ -n "$FEATURES" ]; then
              echo "#### ‚ú® Features" >> changelog_entry.md
              echo "$FEATURES" >> changelog_entry.md
            fi
            
            if [ -n "$FIXES" ]; then
              echo "#### üêõ Bug Fixes" >> changelog_entry.md
              echo "$FIXES" >> changelog_entry.md
            fi
            
            if [ -n "$DOCS" ]; then
              echo "#### üìö Documentation" >> changelog_entry.md
              echo "$DOCS" >> changelog_entry.md
            fi
            
            if [ -n "$CHORES" ]; then
              echo "#### üîß Maintenance" >> changelog_entry.md
              echo "$CHORES" >> changelog_entry.md
            fi
            
            if [ -n "$OTHERS" ]; then
              echo "#### üìù Other Changes" >> changelog_entry.md
              echo "$OTHERS" >> changelog_entry.md
            fi
            
            # Add file changes summary
            echo "#### üìä Changed Files" >> changelog_entry.md
            CHANGED_FILES=$(git diff --name-only "$PREVIOUS_TAG..$RELEASE_TAG" 2>/dev/null | head -10)
            if [ -n "$CHANGED_FILES" ]; then
              echo "$CHANGED_FILES" | sed 's/^/- /' >> changelog_entry.md
            else
              echo "- No file changes detected" >> changelog_entry.md
            fi
            echo "" >> changelog_entry.md
            
          else
            # Initial release
            echo "### üéâ Initial Release" >> changelog_entry.md
            echo "" >> changelog_entry.md
            echo "#### ‚ú® Features" >> changelog_entry.md
            echo "- Setup Liquibase GitHub Action for automated installation" >> changelog_entry.md
            echo "- Support for Liquibase OSS and Pro editions" >> changelog_entry.md
            echo "- Cross-platform compatibility (Ubuntu, Windows, macOS)" >> changelog_entry.md
            echo "- Intelligent caching system for faster builds" >> changelog_entry.md
            echo "- Comprehensive error handling and validation" >> changelog_entry.md
            echo "" >> changelog_entry.md
            echo "#### üîß Technical Features" >> changelog_entry.md
            echo "- Automatic version detection and validation" >> changelog_entry.md
            echo "- GitHub Actions tool cache integration" >> changelog_entry.md
            echo "- Action outputs for version and installation path" >> changelog_entry.md
            echo "- Built with TypeScript and comprehensive testing" >> changelog_entry.md
            echo "" >> changelog_entry.md
          fi
          
          # Add usage section
          echo "#### üìã Usage" >> changelog_entry.md
          echo '```yaml' >> changelog_entry.md
          echo "- name: Setup Liquibase" >> changelog_entry.md
          echo "  uses: liquibase-github-actions/setup-liquibase@$RELEASE_TAG" >> changelog_entry.md
          echo "  with:" >> changelog_entry.md
          echo "    liquibase-version: 'latest'" >> changelog_entry.md
          echo '```' >> changelog_entry.md
          echo "" >> changelog_entry.md
          
          # Create or update CHANGELOG.md
          if [ -f "CHANGELOG.md" ]; then
            echo "Updating existing CHANGELOG.md"
            # Insert new entry after header
            head -n 6 CHANGELOG.md > temp_changelog.md 2>/dev/null || echo "# Changelog" > temp_changelog.md
            echo "" >> temp_changelog.md
            cat changelog_entry.md >> temp_changelog.md
            echo "" >> temp_changelog.md
            tail -n +7 CHANGELOG.md >> temp_changelog.md 2>/dev/null || true
            mv temp_changelog.md CHANGELOG.md
          else
            echo "Creating new CHANGELOG.md"
            cat > CHANGELOG.md << 'CHANGELOG_EOF'
          # Changelog
          
          All notable changes to this project will be documented in this file.
          
          The format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/),
          and this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0.html).
          
          CHANGELOG_EOF
            cat changelog_entry.md >> CHANGELOG.md
          fi
          
          # Commit changelog if there are changes
          if git diff --exit-code CHANGELOG.md; then
            echo "No changes to CHANGELOG.md"
          else
            git add CHANGELOG.md
            git commit -m "docs: update changelog for $RELEASE_TAG"
            git push origin HEAD:${{ github.ref_name }}
          fi
          
          # Clean up
          rm -f changelog_entry.md temp_changelog.md
          
          echo "‚úÖ CHANGELOG.md updated dynamically for release $RELEASE_TAG"

      - name: Generate Build Summary
        if: always()
        run: |
          # Determine release outcome
          if [ "${{ steps.find-draft.outputs.outcome }}" == "found_draft" ]; then
            RELEASE_METHOD="‚úÖ Published from existing draft release"
            RELEASE_STATUS="published"
            RELEASE_URL="${{ steps.find-draft.outputs.html_url }}"
          elif [ "${{ steps.find-draft.outputs.outcome }}" == "already_published" ]; then
            RELEASE_METHOD="‚úÖ Updated existing published release with new assets"
            RELEASE_STATUS="updated"
            RELEASE_URL="${{ steps.find-draft.outputs.html_url }}"
          elif [ "${{ steps.create-release.outcome }}" == "success" ]; then
            RELEASE_METHOD="‚úÖ Created new release"
            RELEASE_STATUS="published"
            RELEASE_URL="${{ steps.create-release.outputs.html_url }}"
          else
            RELEASE_METHOD="‚ùå Failed to create/update release"
            RELEASE_URL="N/A"
            RELEASE_STATUS="failure"
          fi

          # Generate the summary
          cat >> $GITHUB_STEP_SUMMARY << EOF
          # üöÄ Setup Liquibase Release Summary

          ## Release Status
          | Component | Status |
          |-----------|--------|
          | **Release Action** | ${RELEASE_METHOD} |
          | **Release Status** | ${RELEASE_STATUS} |
          | **Release URL** | [View Release](${RELEASE_URL}) |
          | **Version** | ${{ github.ref_name }} |

          ## Build Verification
          | Component | Status |
          |-----------|--------|
          | **Dependencies** | ‚úÖ Installed successfully |
          | **Tests** | ‚úÖ All tests passed |
          | **Linting** | ‚úÖ Code quality checks passed |
          | **Build** | ‚úÖ Distribution files generated |
          | **Action Test** | ‚úÖ Local action test successful |

          ## Artifacts
          | Artifact | Status |
          |----------|--------|
          | **dist/index.js** | ‚úÖ Built and uploaded |
          | **dist/index.js.map** | ‚úÖ Source map generated |
          | **CHANGELOG.md** | ‚úÖ Updated with release notes |

          ## Quick Links
          - üîó [Release Page](${RELEASE_URL})
          - üìã [Commit History](https://github.com/${{ github.repository }}/commits/${{ github.ref_name }})
          - üì¶ [Action on Marketplace](https://github.com/marketplace/actions/setup-liquibase)

          ---
          $(if [ "${RELEASE_STATUS}" == "published" ]; then echo "üéâ **Release published successfully!**"; elif [ "${RELEASE_STATUS}" == "updated" ]; then echo "üîÑ **Release updated successfully!**"; else echo "‚ùå **Release process encountered errors**"; fi)
          EOF

          echo "üéâ Release Summary:"
          echo "- Version: ${{ github.ref_name }}"
          echo "- Method: $RELEASE_METHOD"
          echo "- Status: $RELEASE_STATUS"
          echo "- URL: $RELEASE_URL" 